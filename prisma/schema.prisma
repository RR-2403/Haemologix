generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model DonorRegistration {
  id                      String          @id @default(uuid())
  firstName               String
  lastName                String
  email                   String          @unique
  phone                   String
  dateOfBirth             DateTime
  gender                  String
  address                 String
  emergencyContact        String
  emergencyPhone          String
  weight                  String
  height                  String
  bmi                     String
  lastDonation            DateTime?
  donationCount           String?
  neverDonated            Boolean         @default(false)
  recentVaccinations      Boolean         @default(false)
  vaccinationDetails      String?
  medicalConditions       String?
  medications             String?
  hivTest                 String
  hepatitisBTest          String
  hepatitisCTest          String
  syphilisTest            String
  malariaTest             String
  hemoglobin              String
  bloodGroup              String
  plateletCount           String
  wbcCount                String
  bloodTestReport         String?
  idProof                 String?
  medicalCertificate      String?
  dataProcessingConsent   Boolean         @default(false)
  medicalScreeningConsent Boolean         @default(false)
  termsAccepted           Boolean         @default(false)
  status                  ApprovalStatus  @default(PENDING)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  latitude                String?
  longitude               String?
  responses               AlertResponse[]
  approvals               Approval[]      @relation("DonorApprovals")
}

model HospitalRegistration {
  id                            String         @id @default(uuid())
  bloodBankLicense              String
  licenseExpiryDate             DateTime?
  sbtcNoc                       Boolean
  nocNumber                     String
  nocExpiryDate                 DateTime?
  nbtcCompliance                Boolean
  nacoCompliance                Boolean
  hospitalName                  String
  hospitalAddress               String
  city                          String
  state                         String
  pincode                       String
  operationalStatus             String
  coldStorageFacility           Boolean
  temperatureStandards          Boolean
  testingLabsOnsite             Boolean
  affiliatedLabs                String
  qualifiedMedicalOfficer       Boolean
  certifiedTechnicians          String
  contactEmail                  String
  contactPhone                  String
  inventoryReporting            Boolean
  realTimeUpdates               Boolean
  emergencyResponseCommitment   Boolean
  responseTimeMinutes           String
  dataHandlingCommitment        Boolean
  confidentialityAgreement      Boolean
  bloodBankLicenseDoc           String?
  hospitalRegistrationCert      String?
  authorizedRepIdProof          String?
  contactDetails24x7            String
  mouAcceptance                 Boolean
  repName                       String
  repDesignation                String
  repIdNumber                   String
  repEmail                      String
  repPhone                      String
  termsAccepted                 Boolean
  dataProcessingConsent         Boolean
  networkParticipationAgreement Boolean
  status                        ApprovalStatus @default(PENDING)
  createdAt                     DateTime       @default(now())
  updatedAt                     DateTime       @updatedAt
  latitude                      String?
  longitude                     String?
  alerts                        Alert[]
  approvals                     Approval[]     @relation("HospitalApprovals")
}

model Admin {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  approvals Approval[]
}

model Approval {
  id         String                @id @default(uuid())
  approvedBy String
  approvedAt DateTime              @default(now())
  decision   Decision
  remarks    String?
  status     ApprovalStatus        @default(PENDING)
  hospitalId String?
  donorId    String?
  admin      Admin                 @relation(fields: [approvedBy], references: [id])
  donor      DonorRegistration?    @relation("DonorApprovals", fields: [donorId], references: [id])
  hospital   HospitalRegistration? @relation("HospitalApprovals", fields: [hospitalId], references: [id])
}

model Alert {
  id           String               @id @default(uuid())
  bloodType    String
  latitude     String?
  longitude    String?
  urgency      UrgencyLevel
  unitsNeeded  String
  searchRadius String
  description  String?
  hospitalId   String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  hospital     HospitalRegistration @relation(fields: [hospitalId], references: [id])
  responses    AlertResponse[]
}

model AlertResponse {
  id        String            @id @default(uuid())
  alertId   String
  donorId   String
  status    ResponseStatus    @default(PENDING)
  confirmed Boolean  @default(false)
  createdAt DateTime          @default(now())
  alert     Alert             @relation(fields: [alertId], references: [id])
  donor     DonorRegistration @relation(fields: [donorId], references: [id])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Decision {
  APPROVED
  REJECTED
}

enum UrgencyLevel {
  MEDIUM
  HIGH
  CRITICAL
}

enum ResponseStatus {
  PENDING
  CONFIRMED
  DECLINED
}
